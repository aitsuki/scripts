"""
功能：
对A目录中所有图片进行压缩，保存到B目录。
- 支持文件名加密
- 支持png转换成webp
- 自动生成dart常量文件
- 支持修改文件名或删除文件

示例：
images/icon_foo.png 压缩为 assets/images/ghYmKtb.webp，并生成常量 static const String iconFoo = "assets/images/ghYmKtb.webp";

注意：
1. 输入目录中的文件名必须使用 snake_case 格式命名，不能以数字开头，例如：icon_foo.png
2. 输入目录中的文件名不能重复，例如：icon_foo.jpg 和 icon_foo.png 相同，后者会覆盖前者
3. 输入目录中的文件需要持久保留，删除输入目录中的文件会导致输出目录文件也被删除，
   可以利用这一点删除不需要的图片或者修改图片名

用法：
1. 将脚本放到flutter项目根目录下
2. 修改 CFG_ 开头的配置，其中 CFG_ENCRYPT_SALT 必须修改，推荐设为App名字
3. 安装pillow依赖：pip install pillow
4. 在项目根目录下执行脚本：python flutter_image_compress.py
"""

import hashlib
import os
import re
from PIL import Image


###################################################################################################################
## 加密配置
CFG_ENCRYPT_ENABLED = True
CFG_ENCRYPT_SALT = "xyz"  # 加盐是为了区分不同的App相同名字的图片，防止出现相同hash值
CFG_ENCRYPT_LEN = 5  # 加密长度（hash值截取长度）
CFG_ENCRYPT_ENHANCED = True  # 是否增强加密算法，生成的文件名会被加密成更随机的字符串（大小写字母+数字），且长度会稍微变长。

## 生成dart文件配置: /libs/res/images.g.dart
CFG_DART_PATH = "res"  # /libs/res/
CFG_DART_CLASS_NAME = "Images"  # 文件名为images.g.dart，类名为 Images

## 图片输入/输出目录
CFG_INPUT_DIR = "images"
CFG_OUTPUT_DIR = "assets/imgs"

## 图片压缩质量
CFG_COMPRESS_QUALITY = 75
###################################################################################################################

img_re = r"^[a-z](_?[0-9a-z])*\.(png|jpg|jpeg|webp)$"
out_img_re = r"^[a-zA-Z0-9]*\.(jpg|jpeg|webp)$"
alphabet = "abcdefghijkmnopqrstuvwxyz123456789ABCDEFGHJKLMNPQRSTUVWXYZ"


def encrypt(filename):
    if not CFG_ENCRYPT_ENABLED:
        return filename
    hash = hashlib.sha1((filename + CFG_ENCRYPT_SALT).encode()).hexdigest()[
        :CFG_ENCRYPT_LEN
    ]
    if CFG_ENCRYPT_ENHANCED:
        num = int.from_bytes(hash.encode("ascii"), byteorder="big")
        hash = ""
        while num > 0:
            num, mod = divmod(num, len(alphabet))
            hash = alphabet[mod] + hash
        return hash
    return hash

class InputFile:
    def __init__(self, f: str):
        self.f = f
        self.name = os.path.splitext(f)[0]
        self.ext = os.path.splitext(f)[1][1:]
        self.encrypt_name = encrypt(self.name)

    def __str__(self):
        return f"{self.f} -> {self.name}, {self.ext}, {self.encrypt_name}"


class OutputFile:
    def __init__(self, f: str):
        self.f = f
        self.name = os.path.splitext(f)[0]
        self.ext = os.path.splitext(f)[1][1:]


# 读取输入目录
input_files = []
for f in os.listdir(CFG_INPUT_DIR):
    if re.match(img_re, f):
        input_files.append(InputFile(f))
    else:
        print("ignore illegal input file: " + f)

# 读取输出目录
# 移除已在输入目录中删除了的文件，移除不合法的文件
output_files = []
if not os.path.exists(CFG_OUTPUT_DIR):
    os.makedirs(CFG_OUTPUT_DIR)
for f in os.listdir(CFG_OUTPUT_DIR):
    if re.match(out_img_re, f):
        name = os.path.splitext(f)[0]
        if name not in [f1.encrypt_name for f1 in input_files]:
            os.remove(os.path.join(CFG_OUTPUT_DIR, f))
            print("remove deleted file: " + f)
        else:
            output_files.append(OutputFile(f))
    else:
        os.remove(os.path.join(CFG_OUTPUT_DIR, f))
        print("remove illegal output file: " + f)

# 压缩图片
for f in input_files:
    if f.encrypt_name in [f1.name for f1 in output_files]:
        print("ignore compressed file: " + f.name)
        continue

    image = Image.open(os.path.join(CFG_INPUT_DIR, f.f))
    if f.ext == "png":
        save_path = os.path.join(CFG_OUTPUT_DIR, f.encrypt_name + ".webp")
        image.save(save_path, "webp", optimize=True, quality=CFG_COMPRESS_QUALITY)
    else:
        save_path = os.path.join(CFG_OUTPUT_DIR, f.encrypt_name + "." + f.ext)
        image.save(save_path, optimize=True, quality=CFG_COMPRESS_QUALITY)
    image.close()
    print(f"compress file: {f.name} -> {f.encrypt_name}, {os.path.getsize(os.path.join(CFG_INPUT_DIR, f.f)) // 1024}KB -> {os.path.getsize(save_path) // 1024}KB")

def to_camel_case(snake_str):
    components = snake_str.split("_")
    return components[0] + "".join(x.title() for x in components[1:])


# 生成dart文件
dart_file_path = os.path.join("libs", CFG_DART_PATH, CFG_DART_CLASS_NAME.lower() + ".g.dart")
if not os.path.exists(dart_file_path):
    os.makedirs(os.path.dirname(dart_file_path))
    
with open(dart_file_path, "w") as df:
    df.write("// This file is generated by flutter_image_compress.py and should not be modified\n\n")
    df.write("class " + CFG_DART_CLASS_NAME + " {\n")
    for f in input_files:
        df.write(f"  static const String {to_camel_case(f.name)} = '{CFG_OUTPUT_DIR}/{f.encrypt_name}.{f.ext}';\n")
    df.write("}\n")
